{"mappings":"YAAA,IAAMA,EAAO,CACXC,MAAOC,SAASC,cAAc,qBAC9BC,KAAMF,SAASC,cAAc,oBAC7BE,OAAQH,SAASC,cAAc,sBAC/BG,KAAMJ,SAASC,cAAc,UAG/BH,EAAKM,KAAKC,iBAAiB,UAE3B,SAA2BC,GACzBA,EAAEC,iBACF,IAAMC,EAAQC,OAAOX,EAAKC,MAAMW,OAC1BR,EAAOO,OAAOX,EAAKI,KAAKQ,QAehC,SAA+BC,GAC7B,IAAMC,EAAkB,GACxB,IAAKC,EAAI,EAAGA,GAAKF,EAAGE,GAAK,EACvBD,EAAgBE,KAAKD,GAEvB,OAAOD,C,EAlBPG,CADeN,OAAOX,EAAKK,OAAOO,QACJM,QAAO,SAACC,EAAKC,GAqB7C,IAAuBC,EAAUpB,EAb7B,OAamBoB,EApBLD,EAoBenB,EApBNkB,EAqBlB,IAAIG,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAGpCC,YAAW,W,OAAMJ,EAAQ,CAAEF,WAAUpB,S,GAAUA,GAE/C0B,YAAW,W,OAAMH,EAAO,CAAEH,WAAUpB,S,GAAUA,E,KA1B7C2B,MAAK,SAAAC,G,IAAGR,EAAQQ,EAARR,SAAUpB,EAAK4B,EAAL5B,MACjB6B,QAAQC,IAAI,uBAAwCC,OAAfX,EAAS,QAAYW,OAAN/B,EAAM,M,IAE3DgC,OAAM,SAAAJ,G,IAAGR,EAAQQ,EAARR,SAAUpB,EAAK4B,EAAL5B,MAClB6B,QAAQC,IAAI,sBAAqCC,OAAfX,EAAS,QAAYW,OAAN/B,EAAM,M,IAEnDkB,EAAOf,C,GACdM,GACHF,EAAE0B,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["const refs = {\n  delay: document.querySelector('input[name=delay]'),\n  step: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n  form: document.querySelector('.form'),\n};\n\nrefs.form.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler(e) {\n  e.preventDefault();\n  const delay = Number(refs.delay.value);\n  const step = Number(refs.step.value);\n  const amount = Number(refs.amount.value);\n  createPromisesNumbers(amount).reduce((acc, promise) => {\n    createPromise(promise, acc)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    return (acc += step);\n  }, delay);\n  e.currentTarget.reset();\n}\n\nfunction createPromisesNumbers(n) {\n  const promisesNumbers = [];\n  for (i = 1; i <= n; i += 1) {\n    promisesNumbers.push(i);\n  }\n  return promisesNumbers;\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      setTimeout(() => resolve({ position, delay }), delay);\n    } else {\n      setTimeout(() => reject({ position, delay }), delay);\n    }\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","form","addEventListener","e","preventDefault","delay1","Number","value","n","promisesNumbers","i","push","$ce04d3a99e08e73b$var$createPromisesNumbers","reduce","acc","promise","position","Promise","resolve","reject","Math","random","setTimeout","then","param","console","log","concat","catch","currentTarget","reset"],"version":3,"file":"03-promises.a3444f76.js.map"}